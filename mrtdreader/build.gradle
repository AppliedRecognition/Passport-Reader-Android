apply plugin: 'com.android.library'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: "com.vanniktech.android.apk.size"

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 3
        versionName rootProject.version
        archivesBaseName = "mrtd-reader"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:${rootProject.appcompatVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.constraintlayoutVersion}"
    implementation "org.jmrtd:jmrtd:${rootProject.jmrtdVersion}"
    implementation "org.ejbca.cvc:cert-cvc:${rootProject.certcvcVersion}"
    implementation "net.sf.scuba:scuba-sc-android:${rootProject.scubaVersion}"
    implementation "com.madgag.spongycastle:prov:${rootProject.spongycastleVersion}"
    implementation "com.google.code.gson:gson:${rootProject.gsonVersion}"
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}


task javadoc(type: Javadoc, dependsOn: ':doclet:compileJava') {
    source = android.sourceSets.main.java.srcDirs

    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += files(ext.androidJar)

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/Jama'
    exclude '**/jj2000'
    options.doclet("AppliedRecDoclet")
    options.docletpath(new File("${project.getRootDir()}/doclet/build/classes/java/main"))
    options.addStringOption("htmlsrc", "${project.getRootDir()}/doclet/src/docs")
    options.addStringOption("destpath", "${project.getRootDir()}/sample/docs")
    print("Generate documentation in ${project.getRootDir()}/sample/docs")
    failOnError = true
}